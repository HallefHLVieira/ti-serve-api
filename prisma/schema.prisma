// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MEMBER
}

model User {
  id            String    @id @default(uuid())
  name          String
  phone         String    @unique
  password_hash String
  is_verified   Boolean   @default(false)
  role          Role      @default(MEMBER)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  deleted_at    DateTime?

  location    Location @relation(fields: [location_id], references: [id])
  location_id Int //one user has one location

  services  Service[] //one user has many services
  followers Follower[] //one user can like to many services

  @@map("users")
}

model Service {
  id          String    @id @default(uuid())
  name        String    @unique
  description String
  is_valid    Boolean   @default(false)
  street      String?
  number      String?
  zip_code    String?
  latitude    Decimal?
  longitude   Decimal?
  banner_key  String?
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?

  user        User     @relation(fields: [user_id], references: [id])
  user_id     String //one service has a vincule with an user
  location    Location @relation(fields: [location_id], references: [id])
  location_id Int //one service has a vincule with a location

  followers Follower[] //one service has many follers
  phones    Phone[] //one service has many phones

  @@map("services")
}

model Follower {
  id         Int       @id @default(autoincrement())
  liked      Boolean   @default(true)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  user    User   @relation(fields: [user_id], references: [id])
  user_id String //one follower is vinculed to one user

  service    Service @relation(fields: [service_id], references: [id])
  service_id String //one follower is vinculed to one service

  @@map("followers")
}

model Phone {
  id          Int       @id @default(autoincrement())
  number      String    @unique
  is_whatsapp Boolean   @default(false)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?

  service_id String //one phone is vinculed to one service
  service    Service @relation(fields: [service_id], references: [id])

  @@map("phones")
}

model Location {
  id         Int       @id
  name       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  User       User[] //one location can be vinculed to many users
  service    Service[] //one location can be vinculed to many services 

  @@map("locations")
}
